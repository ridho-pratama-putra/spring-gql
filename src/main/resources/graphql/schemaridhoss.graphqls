scalar LocalDateTime
type Query {
    artistById(id: ID): Artist!
    artists: [Artist]
    releasesByArtistId(id: ID, first: Int, after: String): ReleaseConnection
    allReleases(first: Int, after: String): ReleaseConnection
}

type Mutation {
    createArtist(artistInput: ArtistInput): Artist
    createReleaseOnArtist(releaseInput: ReleaseInput): Release
}

input ArtistInput {
    name: String!
}

input ReleaseInput {
    title: String!
    releaseDate: String!
    artist: ArtistInput!
    releaseType: String!
    category: String!
}

type Artist {
    id: ID
    name: String!
    releases: [Release]
}

type Release {
    id: ID
    title: String!
    createdByUser:String!
    creationDate:LocalDateTime!
    lastModifiedDate:String!
    lastModifiedUserId: String!
    category: String
    releaseType: String!
    releaseDate: String!
    duration: String!
    artist: Artist!
}

type ReleaseConnection {
    edges: [ReleaseEdge]
    pageInfo: PageInfo
}

type ReleaseEdge {
    cursor: String
    node: Release
}

type PageInfo {
    hasPreviousPage: Boolean!
    hasNextPage: Boolean!
    startCursor: String
    endCursor: String
}