type Query {
    artistById(id: ID): Artist!
    artists: [Artist]
    albumsByArtistId(id: ID): [Album]
    allAlbums(first: Int, after: String): AlbumConnection
}

type Mutation {
    createArtist(artistInput: ArtistInput): Artist
    createAlbumOnArtist(albumInput: AlbumInput): Album
}

input ArtistInput {
    name: String!
}

input AlbumInput {
    title: String!
    releaseDate: String!
    artist: ArtistInput!
}

type Artist {
    id: ID
    name: String!
    albums: [Album]
#    albumsList: [Album]
}

type Album {
    id: ID
    title: String!
    categoryEnum: String!
    addedDate: String!
    category: String!
    releaseDate: String!
    duration: String!
    artist: Artist!
}

type AlbumConnection {
    edges: [AlbumEdge]
    pageInfo: PageInfo
}

type AlbumEdge {
    cursor: String
    node: Album
}

type PageInfo {
    hasPreviousPage: Boolean!
    hasNextPage: Boolean!
    startCursor: String
    endCursor: String
}