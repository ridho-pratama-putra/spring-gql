apiVersion: v1
kind: Namespace
metadata:
  name: app
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: spring-gql-deployment
  namespace: app
  labels:
    app: spring-gql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: spring-gql
  template:
    metadata:
      labels:
        app: spring-gql
    spec:
      containers:
        - name: spring-gql-container
          image: docker.io/library/spring-gql:0.0.5-SNAPSHOT
          ports:
            - containerPort: 8080
              protocol: TCP
          env:
            - name: MONGODB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: spring-gql-secret
                  key: mongodb-username
            - name: MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: spring-gql-secret
                  key: mongodb-password
            - name: MONGODB_PREFIX_URL
              valueFrom:
                configMapKeyRef:
                  name: artist-library-config-map
                  key: mongodb_prefix_url
            - name: MONGODB_DATABASE
              valueFrom:
                configMapKeyRef:
                  name: artist-library-config-map
                  key: mongodb_db_name
            - name: MONGODB_CLUSTER
              valueFrom:
                configMapKeyRef:
                  name: artist-library-config-map
                  key: mongodb_cluster
          resources:
            limits:
              cpu: 300m
            requests:
              cpu: 200m
          startupProbe:
            httpGet:
              path: /actuator/health
              port: 8080
            failureThreshold: 12
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 5
---
kind: Service
apiVersion: v1
metadata:
  name: spring-gql-service
  namespace: app
spec:
  selector:
    app: spring-gql
#  type: LoadBalancer # as marked as external service
  ports:
    - name: spring-gql-service
      protocol: TCP
      port: 8080
      targetPort: 8080 # port of pod
#      nodePort: 30000 # so now browser will have access by this port
---
#kind: Service
#apiVersion: v1
#metadata:
#  name: default-http-backend
#  namespace: app
#spec:
#  type: NodePort
#  selector:
#    app: spring-gql
#  ports:
#    - protocol: TCP
#      port: 80
#      targetPort: 8080
---
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  labels:
    app.kubernetes.io/component: controller
  name: ingress-spring-gql-class
  annotations:
    ingressclass.kubernetes.io/is-default-class: "true"
spec:
  controller: k8s.io/ingress-nginx
---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: ingress-spring-gql
  namespace: app
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
#  defaultBackend:
#    service:
#      name: spring-gql-service
#      port:
#        number: 8080
  ingressClassName: ingress-spring-gql-class
  tls:
    - hosts:
      - kodir.babyshark.com
      secretName: app-secret-tls
  rules:
    - host: kodir.babyshark.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: spring-gql-service
                port:
                  number: 8080